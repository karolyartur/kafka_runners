# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html

stages:          # List of stages for jobs, and their order of execution
  - build
  - publish
  - init
  - deploy
  - test
  - prod-deploy

#shell executor van beállítva!
build.job:
  stage: build
  only:
    - renderer
    - renderer-gpu
    - mrcnn-training
    - mrcnn-training-gpu
  script:
    - docker build -t kafkarunners:${CI_COMMIT_BRANCH} .
publish-job:
  stage: publish
  only:
    - renderer
    - renderer-gpu
    - mrcnn-training
    - mrcnn-training-gpu
  script:
    - docker login -p "$REGISTRY_PASSWORD" -u runner1 https://registry.hpc.ekik.uni-obuda.hu:5000
    - echo "login to registry OK kafkarunners branch-> ${CI_COMMIT_BRANCH}"
    #nincs meglevo cntainer, csak ekkor kell ez, ha futik.
    #    - docker container commit $COMMIT_HASH kafkarunners:latest
    #    - echo "commit done"
    - docker image tag kafkarunners:${CI_COMMIT_BRANCH} registry.hpc.ekik.uni-obuda.hu:5000/kafkarunners:${CI_COMMIT_BRANCH}
    - echo "tagging OK"
    - docker image push registry.hpc.ekik.uni-obuda.hu:5000/kafkarunners:${CI_COMMIT_BRANCH}
    - echo "push was successfull"
#ez leskálázza szépen a service-t majd kinyiffantja, hogy ne akadjon össze semmi lehetőleg.
init-job:
  stage: init
  only:
    - renderer
    - renderer-gpu
    - mrcnn-training
    - mrcnn-training-gpu
  script:
    - whoami
    - docker service update --force --update-parallelism 1 --update-delay 30s --replicas 0 fungirenderer || echo "there is no service like this"
    - docker service rm fungirenderer || echo "there is no service like this"
#telepítjük a szolgáltatást a megfelelő beállításokkal és indítjuk. A worktereknek hozzá kell tudniuk férni a registry-hez, ami be van állítva.
deploy-job:
  stage: deploy
  only:
    - renderer
    - renderer-gpu
    - mrcnn-training
    - mrcnn-training-gpu
  script:
    - echo "-e IN_KAFKA_TOPIC=${IN_KAFKA_TOPIC} -e OUT_KAFKA_TOPIC=${OUT_KAFKA_TOPIC} -e KAFKA_BROKERS=${KAFKA_BROKERS}"
    - docker service create --with-registry-auth --replicas 1 --name fungirenderer -e "IN_KAFKA_TOPIC=${IN_KAFKA_TOPIC}" --mount type=bind,source=/opt/fungi,destination=/app/credentials -e "OUT_KAFKA_TOPIC=${OUT_KAFKA_TOPIC}" -e "KAFKA_BROKERS=${KAFKA_BROKERS}" registry.hpc.ekik.uni-obuda.hu:5000/kafkarunners:${CI_COMMIT_BRANCH} 
#Teszteléshez kellenek Artúr által krealt scriptek, lehetőleg bedrótozott legyen és csak össze kelljen hasonlítani egy "golden" kimenettel. ami lehet annyi, hogy kafka topicban létrejöttek a kimenetek, vagy egy success-t írt a kimenetre.
test-job0:
  stage: test
  only:
    - renderer
    - renderer-gpu
    - mrcnn-training
    - mrcnn-training-gpu
  script: 
    #- export KIMENET="$(python3 kafka_test_producer.py --botstrap-server )"
    - python3 kafka_test_producer.py -m {\"jobId\":0\,\"timestamp\":0\,\"scenePath\":\"minio.python.api.test/test.blend\"\,\"outputLocation\":\"minio.python.api.test/render_test\"\,\"startFrame\":111\,\"numFrames\":2} render.job 10.8.8.226:9092 || echo "no para ez meg dummy"
#ellenorizni, hogy kerult-e feldolgozásra utaló új kafka maessage a pipelineba
test-job1:
  stage: test
  needs: 
    - test-job0
  only:
    - renderer
    - renderer-gpu
    - mrcnn-training
    - mrcnn-training-gpu
  script:
    - timeout -t 30 kafkacat --help

prod-deploy-job:
  stage: prod-deploy
  only:
    - renderer
    - renderer-gpu
    - mrcnn-training
    - mrcnn-training-gpu
  when: manual
  script: 
    - docker service update --force --update-parallelism 1 --update-delay 30s --replicas 0 prodrunner || echo "there is no service like this"
    - docker service rm prodrunner || echo "there is no service like this"
    - docker service create --replicas 1 --name prodrunner alpine ping docker.com
